.modalError {
  padding: 20px;
  z-index: 5;
  position: fixed;
  border-radius: 10px;
  background-color: #ddecf9;

  .p {
    font-size: 1.2rem;
    margin-bottom: 1.5vw;

    text-align: center;
  }

  .modalErrorBtn {
    display: block;
    transition: 0.2s ease;

    background-color: #1d4ae9;
    color: #ffffff;

    margin: 0 auto;

    font-size: 16px;
    font-weight: 400;
    text-transform: none;
    line-height: 1em;
    letter-spacing: 0.32px;

    border-radius: 5px;
    border: none;

    cursor: pointer;
  }

  .modalBtnsContainer {
    display: flex;
    gap: 10px;
    justify-content: center;
    gap: 30px;
  }

  @media (any-hover: hover) {
    .modalErrorBtn:hover {
      background: #5eabdd;
    }
  }
}

/*   Open state of the dialog  */
dialog[open] {
  opacity: 1;
  transform: scaleY(1);
}

/*   Closed state of the dialog   */
dialog {
  opacity: 0;
  transform: scaleY(0);
  transition:
    opacity 0.4s ease-out,
    transform 0.4s ease-out,
    overlay 0.4s ease-out allow-discrete,
    display 0.4s ease-out allow-discrete;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

/*   Before-open state  */
/* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
@starting-style {
  dialog[open] {
    opacity: 0;
    transform: scaleY(0);
  }
}

/* Transition the :backdrop when the dialog modal is promoted to the top layer */
dialog::backdrop {
  background-color: rgb(0 0 0 / 0%);
  transition:
    display 0.4s allow-discrete,
    overlay 0.4s allow-discrete,
    background-color 0.4s;
  /* Equivalent to
  transition: all 0.7s allow-discrete; */
}

dialog[open]::backdrop {
  background-color: rgb(0 0 0 / 55%);
}

/* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */

@starting-style {
  dialog[open]::backdrop {
    background-color: rgb(0 0 0 / 0%);
  }
}
